---

---

<div class="search-container relative w-full">
  <form id="search-form" class="flex w-full items-center" role="search">
    <div class="relative w-full">
      <div
        class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-4 w-4 text-neutral-500 dark:text-neutral-300"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
      </div>
      <input
        type="search"
        id="search-input"
        class="dark:bg-dark-bg w-full rounded-md border border-neutral-400 p-2 pl-10 text-sm text-neutral-900 dark:border-neutral-600 dark:text-white"
        placeholder="Search anything"
        aria-label="Search anything"
      />
    </div>
    <div
      id="search-results"
      class="dark:bg-dark-bg absolute top-full right-0 left-0 z-10 mt-1 hidden max-h-60 overflow-auto rounded-md border border-neutral-300 bg-white dark:border-neutral-700"
    >
    </div>
  </form>
</div>

<script>
  type Post = {
    title: string;
    description: string;
    content?: string;
    url: string;
    pubDate: string;
    author: string;
    tags: string[];
  };

  let isSearchInitialized = false;

  document.addEventListener("astro:page-load", initSearch);

  if (document.readyState !== "loading") {
    initSearch();
  }

  document.addEventListener("astro:before-preparation", () => {
    isSearchInitialized = false;
  });

  async function initSearch() {
    if (isSearchInitialized) return;
    const searchInput = document.getElementById(
      "search-input"
    ) as HTMLInputElement;
    const searchResults = document.getElementById(
      "search-results"
    ) as HTMLDivElement;
    const searchForm = document.getElementById("search-form");

    if (!searchInput || !searchResults || !searchForm) {
      console.warn("Search elements not found, retrying...");
      setTimeout(initSearch, 100);
      return;
    }

    isSearchInitialized = true;

    const newSearchInput = searchInput.cloneNode(true) as HTMLInputElement;
    searchInput.parentNode?.replaceChild(newSearchInput, searchInput);

    let posts: Post[] = [];

    try {
      const response = await fetch("/search-index.json");
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      posts = await response.json();
    } catch (error) {
      console.error("Error loading search index:", error);
      return;
    }

    const freshSearchInput = document.getElementById(
      "search-input"
    ) as HTMLInputElement;
    const freshSearchResults = document.getElementById(
      "search-results"
    ) as HTMLDivElement;
    const freshSearchForm = document.getElementById(
      "search-form"
    ) as HTMLElement;

    if (!freshSearchInput || !freshSearchResults || !freshSearchForm) return;

    freshSearchInput.addEventListener("input", () => {
      const query = freshSearchInput.value.toLowerCase().trim();

      if (query.length < 2) {
        freshSearchResults.classList.add("hidden");
        return;
      }

      const filteredPosts = posts.filter(
        (post) =>
          post.title.toLowerCase().includes(query) ||
          post.description?.toLowerCase().includes(query) ||
          post.content?.toLowerCase().includes(query)
      );

      displayResults(filteredPosts, freshSearchResults, freshSearchInput);
    });

    freshSearchInput.addEventListener("focus", () => {
      if (freshSearchInput.value.trim().length >= 2) {
        freshSearchResults.classList.remove("hidden");
      }
    });

    document.addEventListener("click", (e) => {
      if (!freshSearchForm.contains(e.target as Node)) {
        freshSearchResults.classList.add("hidden");
      }
    });

    freshSearchForm.addEventListener("submit", (e) => {
      e.preventDefault();
    });

    function displayResults(
      results: Post[],
      resultsElement: HTMLDivElement,
      inputElement: HTMLInputElement
    ) {
      resultsElement.innerHTML = "";
      resultsElement.classList.remove("hidden");

      if (results.length === 0) {
        const noResults = document.createElement("div");
        noResults.className =
          "p-3 text-sm text-neutral-600 dark:text-neutral-300";
        noResults.textContent = "No results found";
        resultsElement.appendChild(noResults);
        return;
      }

      results.slice(0, 5).forEach((post) => {
        const query = inputElement.value.toLowerCase().trim();
        const resultItem = document.createElement("a");

        if (!post.url || post.url.includes("undefined")) {
          console.error("Invalid URL for post:", post);
        }

        const titleMatch = post.title.toLowerCase().includes(query);
        const descriptionMatch = post.description
          ?.toLowerCase()
          .includes(query);

        if (titleMatch || descriptionMatch) {
          resultItem.href = post.url || "#";
        } else {
          resultItem.href = `${post.url || "#"}?search=${encodeURIComponent(query)}`;
        }

        resultItem.className =
          "block p-3 hover:bg-neutral-100 dark:hover:bg-neutral-900";

        const title = document.createElement("div");
        title.className = "font-medium text-neutral-900 dark:text-white";

        const highlightedTitle = post.title.replace(
          new RegExp(`(${query.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")})`, "gi"),
          '<mark class="bg-yellow-200 dark:bg-yellow-600 px-1 rounded">$1</mark>'
        );
        title.innerHTML = highlightedTitle;

        const date = document.createElement("div");
        date.className = "text-xs text-neutral-500 dark:text-neutral-400";
        date.textContent = new Date(post.pubDate).toLocaleDateString();

        resultItem.appendChild(title);
        resultItem.appendChild(date);

        if (
          post.content &&
          post.content.toLowerCase().includes(query) &&
          !post.title.toLowerCase().includes(query) &&
          !post.description?.toLowerCase().includes(query)
        ) {
          const contentIndex = post.content.toLowerCase().indexOf(query);
          const startIndex = Math.max(0, contentIndex - 50);
          const endIndex = Math.min(
            post.content.length,
            contentIndex + query.length + 50
          );
          let snippet = post.content.substring(startIndex, endIndex);

          if (startIndex > 0) snippet = "..." + snippet;
          if (endIndex < post.content.length) snippet = snippet + "...";

          const highlightedSnippet = snippet.replace(
            new RegExp(
              `(${query.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")})`,
              "gi"
            ),
            '<mark class="bg-yellow-200 dark:bg-yellow-600 px-0.5 rounded-xs">$1</mark>'
          );

          const contentSnippet = document.createElement("div");
          contentSnippet.className =
            "text-xs text-neutral-600 dark:text-neutral-300 mt-1";
          contentSnippet.innerHTML = highlightedSnippet;
          resultItem.appendChild(contentSnippet);
        }

        resultsElement.appendChild(resultItem);
      });
    }
  }
</script>

<style>
  .search-container {
    width: 300px;
  }

  @media (max-width: 768px) {
    .search-container {
      width: 100%;
      margin-top: 0.5rem;
    }
  }
</style>
