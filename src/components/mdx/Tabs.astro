---
interface Props {
  defaultTab?: number;
  class?: string;
}

const { defaultTab = 0, class: className } = Astro.props;
---

<div class={`tabs-container ${className || ""}`} data-default-tab={defaultTab}>
  <div class="tab-buttons flex overflow-x-auto" role="tablist">
    <!-- Tab buttons will be rendered by client-side script -->
  </div>
  <div class="tab-content">
    <slot />
  </div>
</div>

<script>
  function initializeTabs() {
    const tabContainers = document.querySelectorAll(".tabs-container");

    tabContainers.forEach((container) => {
      const tabButtonsContainer = container.querySelector(".tab-buttons");
      const tabPanels = container.querySelectorAll(".tab-panel");
      const defaultTab = parseInt(
        container.getAttribute("data-default-tab") || "0"
      );

      if (!tabButtonsContainer || tabPanels.length === 0) return;
      if (tabButtonsContainer.children.length > 0) return;

      tabPanels.forEach((panel, index) => {
        const button = document.createElement("button");
        const title = panel.getAttribute("data-title") || `Tab ${index + 1}`;

        button.textContent = title;
        button.className = `tab-button px-3 font-medium border-b-1 transition-all duration-200 whitespace-nowrap ${
          index === defaultTab
            ? "border-black text-black/90 dark:text-white/90 dark:border-white"
            : "border-transparent hover:text-black/90 hover:dark:text-white/90 cursor-pointer"
        }`;

        button.setAttribute("role", "tab");
        button.setAttribute(
          "aria-selected",
          index === defaultTab ? "true" : "false"
        );
        button.setAttribute("aria-controls", `panel-${index}`);
        button.setAttribute("id", `tab-${index}`);
        button.setAttribute("tabindex", index === defaultTab ? "0" : "-1");

        button.addEventListener("click", () => activateTab(container, index));

        button.addEventListener("keydown", (e) => {
          if (e.key === "ArrowLeft" || e.key === "ArrowRight") {
            e.preventDefault();
            const buttons = Array.from(
              container.querySelectorAll(".tab-button")
            );
            const currentIndex = buttons.indexOf(button);
            const nextIndex =
              e.key === "ArrowLeft"
                ? (currentIndex - 1 + buttons.length) % buttons.length
                : (currentIndex + 1) % buttons.length;

            const nextButton = buttons[nextIndex] as HTMLButtonElement;
            nextButton.focus();
            activateTab(container, nextIndex);
          }
        });

        tabButtonsContainer.appendChild(button);
      });

      tabPanels.forEach((panel, index) => {
        panel.setAttribute("role", "tabpanel");
        panel.setAttribute("aria-labelledby", `tab-${index}`);
        panel.setAttribute("id", `panel-${index}`);

        if (index !== defaultTab) {
          panel.classList.add("hidden");
          panel.setAttribute("aria-hidden", "true");
        } else {
          panel.setAttribute("aria-hidden", "false");
        }
      });
    });
  }

  function activateTab(container: Element, activeIndex: number) {
    const buttons = container.querySelectorAll(".tab-button");
    const panels = container.querySelectorAll(".tab-panel");

    buttons.forEach((btn: Element, index: number) => {
      const isActive = index === activeIndex;

      btn.setAttribute("aria-selected", isActive ? "true" : "false");
      btn.setAttribute("tabindex", isActive ? "0" : "-1");

      if (isActive) {
        btn.className = btn.className.replace(
          "border-transparent hover:text-black/90 hover:dark:text-white/90 cursor-pointer",
          "border-black text-black/90 dark:text-white/90 dark:border-white"
        );
      } else {
        btn.className = btn.className.replace(
          "border-black text-black/90 dark:text-white/90 dark:border-white",
          "border-transparent hover:text-black/90 hover:dark:text-white/90 cursor-pointer"
        );
      }
    });

    panels.forEach((panel: Element, index: number) => {
      const isActive = index === activeIndex;

      if (isActive) {
        panel.classList.remove("hidden");
        panel.setAttribute("aria-hidden", "false");
      } else {
        panel.classList.add("hidden");
        panel.setAttribute("aria-hidden", "true");
      }
    });
  }

  document.addEventListener("astro:page-load", initializeTabs);

  if (document.readyState !== "loading") {
    initializeTabs();
  }
</script>
